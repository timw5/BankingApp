@page
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@model BankingApp.Pages.Account.AccountModel

@{
    ViewData["Title"] = "Account";
    
    


}
<style>
    .linkto:active, .linkto:hover{

        /*border :solid!important;
        border-color : dodgerblue!important; */
        /*font-size-adjust: 2!important;*/
       /* text-emphasis-style:open!important;
        text-emphasis-color:dodgerBlue!important;
        text-emphasis-position:right!important*/

        -webkit-text-stroke:thin!important;
        -webkit-text-stroke-color:cornflowerblue!important;
/*        font-size:1.66rem!important;
*/        -webkit-text-size-adjust:!important;
/*          -webkit-user-select:auto!important;
*//*        padding-right: 3rem!important; 
*/
        
        
    }


    .hidden {
        display: @Model.hidden!important;
    }
</style>



    <div class="container shadow-lg border rounded-3">
        <div class="container mx-auto mt-2 w-100">
            <h1 class="text-center my-4">Welcome @Model._User.Username</h1>
            <div class="row container mx-auto w-100 ">
                
                @foreach (var item in Model._Account)

                {
                    
                    <div class="col-md-3 m-4 p-4 border rounded-2 shadow-lg linkto mx-auto" :hover Onclick="GetTransactions(@item.Type.ToString())" style="cursor: pointer" title="View Transactions" id="@item.ID" >
                        <div class="h3 fw-bold mb-2  text-center">@item.Type</div>
                        <hr/>
                            
                            <div class="col-sm-2 w-100 fw-bold text-center">
                                Balance:
                            </div>
                            <div class="col-sm-2 w-100 text-center">
                                @item.BalanceToString()
                            </div>
                    <div class="col-sm-2 w-100 text-center">
                        <button class="btn btn-success mt-4 mx-auto justify-content-center" id="#AddFunds" type="button">Add Funds</button> @*add funds button*@
                    </div>
                    </div>
                }

            </div>
                    <div class="container w-100 text-center">
            <button class= "btn btn-primary m-4 hidden" id="newacnt"   @*asp-page="/Account/Home" asp-page-handler="AddNewAccount"*@ > Add new Account</button>
                    @Html.AntiForgeryToken()

            <a href="#" class="btn btn-primary m-4" type="button"  id="TransferFunds">Transfer Funds </a>
                    </div>
        </div>
    </div>
    <div class="container" id="DataField">
    </div>

@section scripts{

<script src="~/lib/limonte-sweetalert2/sweetalert2.all.js"></script>

    <script type="text/javascript" >
        //document.querySelector('#newacnt').addEventListener("Click", AddNewAccount)
        //$("#newacnt").click(AddNewAccount);
        //console.log("under event binder");
        //const x = document.querySelector()
        //dummy function...
        //document.getElementById("field1").addEventListener("click", GetTransactions);
$("#newacnt").click(function() {
    //function AddNewAccount() {
    console.log("in newaccount function");
    (async () => {

        const inputOptions = new Promise((resolve) => {
            setTimeout(() => {
                resolve({
                    'Savings': 'Savings',
                    'Investment': 'Investment',
                    'Checking': 'Checking'
                })
            }, 1000)
        })

        const { value: acntType } = await Swal.fire
            ({
                title: "Which type of account?",
                input: "radio",
                showCancelButton: true,
                showConfirmButton: true,
                inputOptions: inputOptions,
                inputValidator: (value) => {
                    if (!value) {
                        return "You must select an account";
                    }
                }
            })
            //.then((result) => 
            //{
            //    return result;
            //})

        if (acntType) {
            const URL = './Home?handler=AddNewAccount';
            $.ajax
                ({
                    type: 'POST',
                    url: URL,
                    async: true,
                    beforeSend: function(xhr) {
                        xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                    },
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    data:
                        JSON.stringify(acntType),
                    success: function(data) {

                        location.reload();

                    },
                    error: function(error) {
                        console.log(`Error ${error}`);
                    }
                }).then(

                    Swal.fire
                        (
                            'Account Created Succesfully',
                            '',
                            'success',

                    ).then((result) => {
                        if (result.isConfirmed) {
                            window.location.reload();
                        }
                    }
                            
                    )
                )
        }
    })();
});
    </script>
}




  
